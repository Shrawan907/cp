well i am writing because some math tricks are really useful....
**
----------
## 1
----------
let assume we want found the integer value x for our function f(x) such that f(x) = 0 or very near to 0.
this type of problem I faced during solving the below codding problem.

well we can solve this as-

  let, f(x) = t - ( ((h+c)*x + c) / (2*x - 1) )
  for f(x) = 0 or nearest to 0,
  put f(x) = 0, and solve for x,
  i.e. x = (t - c) / (2*t - (h+c))
  take ceil and floor of x (as x is between or equal to values) , one these will give us our answer!
**  
codding question:
Q.
---------( https://codeforces.com/contest/1359/problem/C )------------
or  
---------------
There are two infinite sources of water:

    hot water of temperature h

;
cold water of temperature c
(c<h

    ). 

You perform the following procedure of alternating moves:

    take one cup of the hot water and pour it into an infinitely deep barrel;
    take one cup of the cold water and pour it into an infinitely deep barrel;
    take one cup of the hot water …

and so on …

Note that you always start with the cup of hot water.

The barrel is initially empty. You have to pour at least one cup into the barrel. The water temperature in the barrel is an average of the temperatures of the poured cups.

You want to achieve a temperature as close as possible to t
. So if the temperature in the barrel is tb, then the absolute difference of tb and t (|tb−t|

) should be as small as possible.

How many cups should you pour into the barrel, so that the temperature in it is as close as possible to t

? If there are multiple answers with the minimum absolute difference, then print the smallest of them.
Input

The first line contains a single integer T
(1≤T≤3⋅104

) — the number of testcases.

Each of the next T
lines contains three integers h, c and t (1≤c<h≤106; c≤t≤h

) — the temperature of the hot water, the temperature of the cold water and the desired temperature in the barrel.
Output

For each testcase print a single positive integer — the minimum number of cups required to be poured into the barrel to achieve the closest temperature to t
.
------------------
input
3
30 10 20
41 15 30
18 13 18
output
2
7
1

ans.=

        while(test--){
            cin>>h>>c>>t;

            if(h==c && t==c){
                cout<<1<<endl;
                continue;
            }


            if(t<=(h+c)/2){
                cout<<2<<endl;
                continue;
            }
            
            ll num1=ceil(double(t-c)/(2*t-(h+c)));
            ll num2=num1-1;
            ll a1=floor(double(t-c)/(2*t-(h+c)));
            ll a2=a1-1;
            double temp1=((num1*h + num2*c)/(num1+num2));
            double temp2=((a1*h + a2*c)/(a1+a2));
            double temp3=(h+c)/2;

            temp1=abs(temp1-t);
            temp2=abs(temp2-t);
            temp3=abs(temp3-t);
            vector<double> vc;
            vc.push_back(temp1);
            vc.push_back(temp2);
            vc.push_back(temp3);
            sort(vc.begin(),vc.end());
            if(vc[0]==temp2)
                cout<<a1+a2<<endl;
            else if(vc[0]==temp1)
                cout<<num1+num2<<endl;
            else
                cout<<2<<endl;
        }
        
=======================================================

2.

< https://www.interviewbit.com/problems/numbers-of-length-n-and-value-less-than-k/ >

Given a set of digits (A) in sorted order, find how many numbers of length B are possible whose value is less than number C.

    NOTE: All numbers can only have digits from the given set. 

Examples:

	Input:
	  0 1 5  
	  1  
	  2  
	Output:  
	  2 (0 and 1 are possible)  

	Input:
	  0 1 2 5  
	  2  
	  21  
	Output:
	  5 (10, 11, 12, 15, 20 are possible)

Constraints:

    1 <= B <= 9, 0 <= C <= 1e9 & 0 <= A[i] <= 9
    
    
    ans: ==> 
    len(B) == 1 , direct check
    no. of digits in C is less than B return 0
    if no. of digits in C is more than B than ans is permutation of all digits in A except 0 can not in first place
    if no. of digits == B
    first digit cant be 0 and must be less than or equal to givien first digit
    
    code==>
    
    int Solution::solve(vector<int> &A, int B, int C) {
    vector<int> a;
    int c,d,k,r,i,same_digit;
    int n = A.size();
    if(B==1) {
        c=0;
        for(auto x:A)
            if(x<C)
                c++;
        return c;
    }
    while(C > 0) {
        a.push_back(C%10);
        C=C/10;
    }
    if(a.size() < B)
        return 0;
    if(a.size() > B) {
        c = 0;
        for(auto x:A)
            if(x == 0)
                c++;
            return (n-c)*pow(n,B-1);
    }
    reverse(a.begin(),a.end());
    d=0;
    k=0;
    for(auto x:a) {
        c = 0;
        same_digit = 0;
        for(auto y:A) {
            if(y<x && (y != 0 || k > 0))
                c++;
            else if(y == x)
                same_digit = 1;
        }
        k++;
        for(r=1,i=0;i<B-k;i++)
            r *= n;
        d += c*r;
        if(same_digit == 0)
            break;
    }
    return d;
    }


